/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HmppsOffenderAssessmentApi.AuthenticationApi();
  });

  describe('(package)', function() {
    describe('AuthenticationApi', function() {
      describe('getUserAuthorisedForOffenderIdUsingGET', function() {
        it('should call getUserAuthorisedForOffenderIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserAuthorisedForOffenderIdUsingGET call and complete the assertions
          /*
          var oasysUserId = "oasysUserId_example";
          var offenderId = 789;
          var resource = "resource_example";
          var sessionId = 789;

          instance.getUserAuthorisedForOffenderIdUsingGET(oasysUserId, offenderId, resource, sessionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.AuthorisationDto);
            expect(data.oasysOffenderId).to.be.a('number');
            expect(data.oasysOffenderId).to.be("0");
            expect(data.oasysUserCode).to.be.a('string');
            expect(data.oasysUserCode).to.be("");
            expect(data.offenderPermissionLevel).to.be.a('string');
            expect(data.offenderPermissionLevel).to.be("UNAUTHORISED");
            expect(data.offenderPermissionResource).to.be.a('string');
            expect(data.offenderPermissionResource).to.be("SENTENCE_PLAN");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserByUserIdUsingGET', function() {
        it('should call getUserByUserIdUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserByUserIdUsingGET call and complete the assertions
          /*
          var oasysUserId = "oasysUserId_example";

          instance.getUserByUserIdUsingGET(oasysUserId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.OasysUserAuthenticationDto);
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.enabled).to.be.a('boolean');
            expect(data.enabled).to.be(false);
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            {
              let dataCtr = data.regions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.userId).to.be.a('string');
            expect(data.userId).to.be("");
            expect(data.userName).to.be.a('string');
            expect(data.userName).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('validateUserUsingPOST', function() {
        it('should call validateUserUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for validateUserUsingPOST call and complete the assertions
          /*
          var request = new HmppsOffenderAssessmentApi.ValidateUserRequest();
          request.user = "";
          request.password = "";

          instance.validateUserUsingPOST(request).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.AuthenticationDto);
            expect(data.authenticated).to.be.a('boolean');
            expect(data.authenticated).to.be(false);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
