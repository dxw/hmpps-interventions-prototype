/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HmppsOffenderAssessmentApi.ReferenceDataApi();
  });

  describe('(package)', function() {
    describe('ReferenceDataApi', function() {
      describe('getReferenceDataByCategoryCodeUsingGET', function() {
        it('should call getReferenceDataByCategoryCodeUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getReferenceDataByCategoryCodeUsingGET call and complete the assertions
          /*
          var category = "category_example";

          instance.getReferenceDataByCategoryCodeUsingGET(category).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("LAYER_3");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("Full (Layer 3)");
              expect(data.shortDescription).to.be.a('string');
              expect(data.shortDescription).to.be("Layer 3");
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
