/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HmppsOffenderAssessmentApi.SentencePlansApi();
  });

  describe('(package)', function() {
    describe('SentencePlansApi', function() {
      describe('getFullSentencePlanForOffenderUsingGET', function() {
        it('should call getFullSentencePlanForOffenderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getFullSentencePlanForOffenderUsingGET call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var oasysSetPk = 789;

          instance.getFullSentencePlanForOffenderUsingGET(identity, identityType, oasysSetPk).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.FullSentencePlanDto);
            expect(data.completedDate).to.be.a(Date);
            expect(data.completedDate).to.be(new Date());
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(new Date());
            expect(data.oasysSetId).to.be.a('number');
            expect(data.oasysSetId).to.be("0");
            {
              let dataCtr = data.objectives;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.ObjectiveDto);
                expect(data.createdDate).to.be.a(Date);
                expect(data.createdDate).to.be(new Date());
                {
                  let dataCtr = data.criminogenicNeeds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HmppsOffenderAssessmentApi.CriminogenicNeedDto);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.priority).to.be.a('number');
                    expect(data.priority).to.be("0");
    
                          }
                }
                expect(data.howMeasured).to.be.a('string');
                expect(data.howMeasured).to.be("");
                {
                  let dataCtr = data.interventions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HmppsOffenderAssessmentApi.InterventionDto);
                    expect(data.copiedForward).to.be.a('boolean');
                    expect(data.copiedForward).to.be(false);
                    expect(data.interventionCode).to.be.a('string');
                    expect(data.interventionCode).to.be("");
                    expect(data.interventionComment).to.be.a('string');
                    expect(data.interventionComment).to.be("");
                    expect(data.interventionDescription).to.be.a('string');
                    expect(data.interventionDescription).to.be("");
                    expect(data.interventionMeasure).to.be.a(HmppsOffenderAssessmentApi.InterventionMeasureDto);
                          expect(data.interventionMeasure.comments).to.be.a('string');
                      expect(data.interventionMeasure.comments).to.be("");
                      expect(data.interventionMeasure.status).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                            expect(data.interventionMeasure.status.code).to.be.a('string');
                        expect(data.interventionMeasure.status.code).to.be("LAYER_3");
                        expect(data.interventionMeasure.status.description).to.be.a('string');
                        expect(data.interventionMeasure.status.description).to.be("Full (Layer 3)");
                        expect(data.interventionMeasure.status.shortDescription).to.be.a('string');
                        expect(data.interventionMeasure.status.shortDescription).to.be("Layer 3");
                    expect(data.timescale).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                          expect(data.timescale.code).to.be.a('string');
                      expect(data.timescale.code).to.be("LAYER_3");
                      expect(data.timescale.description).to.be.a('string');
                      expect(data.timescale.description).to.be("Full (Layer 3)");
                      expect(data.timescale.shortDescription).to.be.a('string');
                      expect(data.timescale.shortDescription).to.be("Layer 3");
                    {
                      let dataCtr = data.whoDoingWork;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(HmppsOffenderAssessmentApi.WhoDoingWorkDto);
                        expect(data.code).to.be.a('string');
                        expect(data.code).to.be("");
                        expect(data.comments).to.be.a('string');
                        expect(data.comments).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
        
                              }
                    }
    
                          }
                }
                expect(data.objectiveCode).to.be.a('string');
                expect(data.objectiveCode).to.be("");
                expect(data.objectiveComment).to.be.a('string');
                expect(data.objectiveComment).to.be("");
                expect(data.objectiveDescription).to.be.a('string');
                expect(data.objectiveDescription).to.be("");
                expect(data.objectiveHeading).to.be.a('string');
                expect(data.objectiveHeading).to.be("");
                expect(data.objectiveMeasure).to.be.a(HmppsOffenderAssessmentApi.ObjectiveMeasureDto);
                      expect(data.objectiveMeasure.comments).to.be.a('string');
                  expect(data.objectiveMeasure.comments).to.be("");
                  expect(data.objectiveMeasure.status).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                        expect(data.objectiveMeasure.status.code).to.be.a('string');
                    expect(data.objectiveMeasure.status.code).to.be("LAYER_3");
                    expect(data.objectiveMeasure.status.description).to.be.a('string');
                    expect(data.objectiveMeasure.status.description).to.be("Full (Layer 3)");
                    expect(data.objectiveMeasure.status.shortDescription).to.be.a('string');
                    expect(data.objectiveMeasure.status.shortDescription).to.be("Layer 3");
                expect(data.objectiveType).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                      expect(data.objectiveType.code).to.be.a('string');
                  expect(data.objectiveType.code).to.be("LAYER_3");
                  expect(data.objectiveType.description).to.be.a('string');
                  expect(data.objectiveType.description).to.be("Full (Layer 3)");
                  expect(data.objectiveType.shortDescription).to.be.a('string');
                  expect(data.objectiveType.shortDescription).to.be("Layer 3");

                      }
            }
            {
              let dataCtr = data.questions;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.QuestionDto);
                expect(data.answer).to.be.a(HmppsOffenderAssessmentApi.AnswerDto);
                      expect(data.answer.displayOrder).to.be.a('number');
                  expect(data.answer.displayOrder).to.be(1);
                  expect(data.answer.freeFormText).to.be.a('string');
                  expect(data.answer.freeFormText).to.be("Some answer");
                  expect(data.answer.oasysAnswerId).to.be.a('number');
                  expect(data.answer.oasysAnswerId).to.be(123456);
                  expect(data.answer.ogpScore).to.be.a('number');
                  expect(data.answer.ogpScore).to.be(1);
                  expect(data.answer.ovpScore).to.be.a('number');
                  expect(data.answer.ovpScore).to.be(1);
                  expect(data.answer.qaRawScore).to.be.a('number');
                  expect(data.answer.qaRawScore).to.be(2);
                  expect(data.answer.refAnswerCode).to.be.a('string');
                  expect(data.answer.refAnswerCode).to.be("NO");
                  expect(data.answer.refAnswerId).to.be.a('number');
                  expect(data.answer.refAnswerId).to.be(123456);
                  expect(data.answer.staticText).to.be.a('string');
                  expect(data.answer.staticText).to.be("123456");
                expect(data.displayOrder).to.be.a('number');
                expect(data.displayOrder).to.be(123456);
                expect(data.displayScore).to.be.a('number');
                expect(data.displayScore).to.be(123456);
                expect(data.oasysQuestionId).to.be.a('number');
                expect(data.oasysQuestionId).to.be(123456);
                expect(data.questionText).to.be.a('string');
                expect(data.questionText).to.be("123456");
                expect(data.refQuestionCode).to.be.a('string');
                expect(data.refQuestionCode).to.be("10.98");
                expect(data.refQuestionId).to.be.a('number');
                expect(data.refQuestionId).to.be(123456);

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFullSentencePlansForOffenderUsingGET', function() {
        it('should call getFullSentencePlansForOffenderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getFullSentencePlansForOffenderUsingGET call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var opts = {};
          opts.assessmentStatus = "assessmentStatus_example";
          opts.assessmentType = "assessmentType_example";
          opts.historicStatus = "historicStatus_example";
          opts.voided = true;

          instance.getFullSentencePlansForOffenderUsingGET(identity, identityType, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HmppsOffenderAssessmentApi.FullSentencePlanDto);
              expect(data.completedDate).to.be.a(Date);
              expect(data.completedDate).to.be(new Date());
              expect(data.createdDate).to.be.a(Date);
              expect(data.createdDate).to.be(new Date());
              expect(data.oasysSetId).to.be.a('number');
              expect(data.oasysSetId).to.be("0");
              {
                let dataCtr = data.objectives;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HmppsOffenderAssessmentApi.ObjectiveDto);
                  expect(data.createdDate).to.be.a(Date);
                  expect(data.createdDate).to.be(new Date());
                  {
                    let dataCtr = data.criminogenicNeeds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HmppsOffenderAssessmentApi.CriminogenicNeedDto);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.priority).to.be.a('number');
                      expect(data.priority).to.be("0");
      
                            }
                  }
                  expect(data.howMeasured).to.be.a('string');
                  expect(data.howMeasured).to.be("");
                  {
                    let dataCtr = data.interventions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(HmppsOffenderAssessmentApi.InterventionDto);
                      expect(data.copiedForward).to.be.a('boolean');
                      expect(data.copiedForward).to.be(false);
                      expect(data.interventionCode).to.be.a('string');
                      expect(data.interventionCode).to.be("");
                      expect(data.interventionComment).to.be.a('string');
                      expect(data.interventionComment).to.be("");
                      expect(data.interventionDescription).to.be.a('string');
                      expect(data.interventionDescription).to.be("");
                      expect(data.interventionMeasure).to.be.a(HmppsOffenderAssessmentApi.InterventionMeasureDto);
                            expect(data.interventionMeasure.comments).to.be.a('string');
                        expect(data.interventionMeasure.comments).to.be("");
                        expect(data.interventionMeasure.status).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                              expect(data.interventionMeasure.status.code).to.be.a('string');
                          expect(data.interventionMeasure.status.code).to.be("LAYER_3");
                          expect(data.interventionMeasure.status.description).to.be.a('string');
                          expect(data.interventionMeasure.status.description).to.be("Full (Layer 3)");
                          expect(data.interventionMeasure.status.shortDescription).to.be.a('string');
                          expect(data.interventionMeasure.status.shortDescription).to.be("Layer 3");
                      expect(data.timescale).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                            expect(data.timescale.code).to.be.a('string');
                        expect(data.timescale.code).to.be("LAYER_3");
                        expect(data.timescale.description).to.be.a('string');
                        expect(data.timescale.description).to.be("Full (Layer 3)");
                        expect(data.timescale.shortDescription).to.be.a('string');
                        expect(data.timescale.shortDescription).to.be("Layer 3");
                      {
                        let dataCtr = data.whoDoingWork;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(HmppsOffenderAssessmentApi.WhoDoingWorkDto);
                          expect(data.code).to.be.a('string');
                          expect(data.code).to.be("");
                          expect(data.comments).to.be.a('string');
                          expect(data.comments).to.be("");
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
          
                                }
                      }
      
                            }
                  }
                  expect(data.objectiveCode).to.be.a('string');
                  expect(data.objectiveCode).to.be("");
                  expect(data.objectiveComment).to.be.a('string');
                  expect(data.objectiveComment).to.be("");
                  expect(data.objectiveDescription).to.be.a('string');
                  expect(data.objectiveDescription).to.be("");
                  expect(data.objectiveHeading).to.be.a('string');
                  expect(data.objectiveHeading).to.be("");
                  expect(data.objectiveMeasure).to.be.a(HmppsOffenderAssessmentApi.ObjectiveMeasureDto);
                        expect(data.objectiveMeasure.comments).to.be.a('string');
                    expect(data.objectiveMeasure.comments).to.be("");
                    expect(data.objectiveMeasure.status).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                          expect(data.objectiveMeasure.status.code).to.be.a('string');
                      expect(data.objectiveMeasure.status.code).to.be("LAYER_3");
                      expect(data.objectiveMeasure.status.description).to.be.a('string');
                      expect(data.objectiveMeasure.status.description).to.be("Full (Layer 3)");
                      expect(data.objectiveMeasure.status.shortDescription).to.be.a('string');
                      expect(data.objectiveMeasure.status.shortDescription).to.be("Layer 3");
                  expect(data.objectiveType).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                        expect(data.objectiveType.code).to.be.a('string');
                    expect(data.objectiveType.code).to.be("LAYER_3");
                    expect(data.objectiveType.description).to.be.a('string');
                    expect(data.objectiveType.description).to.be("Full (Layer 3)");
                    expect(data.objectiveType.shortDescription).to.be.a('string');
                    expect(data.objectiveType.shortDescription).to.be("Layer 3");
  
                        }
              }
              {
                let dataCtr = data.questions;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HmppsOffenderAssessmentApi.QuestionDto);
                  expect(data.answer).to.be.a(HmppsOffenderAssessmentApi.AnswerDto);
                        expect(data.answer.displayOrder).to.be.a('number');
                    expect(data.answer.displayOrder).to.be(1);
                    expect(data.answer.freeFormText).to.be.a('string');
                    expect(data.answer.freeFormText).to.be("Some answer");
                    expect(data.answer.oasysAnswerId).to.be.a('number');
                    expect(data.answer.oasysAnswerId).to.be(123456);
                    expect(data.answer.ogpScore).to.be.a('number');
                    expect(data.answer.ogpScore).to.be(1);
                    expect(data.answer.ovpScore).to.be.a('number');
                    expect(data.answer.ovpScore).to.be(1);
                    expect(data.answer.qaRawScore).to.be.a('number');
                    expect(data.answer.qaRawScore).to.be(2);
                    expect(data.answer.refAnswerCode).to.be.a('string');
                    expect(data.answer.refAnswerCode).to.be("NO");
                    expect(data.answer.refAnswerId).to.be.a('number');
                    expect(data.answer.refAnswerId).to.be(123456);
                    expect(data.answer.staticText).to.be.a('string');
                    expect(data.answer.staticText).to.be("123456");
                  expect(data.displayOrder).to.be.a('number');
                  expect(data.displayOrder).to.be(123456);
                  expect(data.displayScore).to.be.a('number');
                  expect(data.displayScore).to.be(123456);
                  expect(data.oasysQuestionId).to.be.a('number');
                  expect(data.oasysQuestionId).to.be(123456);
                  expect(data.questionText).to.be.a('string');
                  expect(data.questionText).to.be("123456");
                  expect(data.refQuestionCode).to.be.a('string');
                  expect(data.refQuestionCode).to.be("10.98");
                  expect(data.refQuestionId).to.be.a('number');
                  expect(data.refQuestionId).to.be(123456);
  
                        }
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestBasicSentencePlanForOffenderUsingGET', function() {
        it('should call getLatestBasicSentencePlanForOffenderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestBasicSentencePlanForOffenderUsingGET call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var opts = {};
          opts.assessmentStatus = "assessmentStatus_example";
          opts.assessmentType = "assessmentType_example";
          opts.historicStatus = "historicStatus_example";
          opts.voided = true;

          instance.getLatestBasicSentencePlanForOffenderUsingGET(identity, identityType, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.BasicSentencePlanDto);
            {
              let dataCtr = data.basicSentencePlanItems;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.BasicSentencePlanItemDto);
                expect(data.basicSentPlanObjId).to.be.a('number');
                expect(data.basicSentPlanObjId).to.be("0");
                expect(data.dateCompleted).to.be.a(Date);
                expect(data.dateCompleted).to.be(new Date());
                expect(data.dateOpened).to.be.a(Date);
                expect(data.dateOpened).to.be(new Date());
                expect(data.includeInPlan).to.be.a('boolean');
                expect(data.includeInPlan).to.be(false);
                expect(data.measureText).to.be.a('string');
                expect(data.measureText).to.be("");
                expect(data.objectiveText).to.be.a('string');
                expect(data.objectiveText).to.be("");
                expect(data.offenceBehaviourLink).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                      expect(data.offenceBehaviourLink.code).to.be.a('string');
                  expect(data.offenceBehaviourLink.code).to.be("LAYER_3");
                  expect(data.offenceBehaviourLink.description).to.be.a('string');
                  expect(data.offenceBehaviourLink.description).to.be("Full (Layer 3)");
                  expect(data.offenceBehaviourLink.shortDescription).to.be.a('string');
                  expect(data.offenceBehaviourLink.shortDescription).to.be("Layer 3");
                expect(data.problemAreaCompInd).to.be.a('boolean');
                expect(data.problemAreaCompInd).to.be(false);
                expect(data.timescalesText).to.be.a('string');
                expect(data.timescalesText).to.be("");
                expect(data.whatWorkText).to.be.a('string');
                expect(data.whatWorkText).to.be("");
                expect(data.whoWillDoWorkText).to.be.a('string');
                expect(data.whoWillDoWorkText).to.be("");

                      }
            }
            expect(data.createdDate).to.be.a(Date);
            expect(data.createdDate).to.be(new Date());
            expect(data.sentencePlanId).to.be.a('number');
            expect(data.sentencePlanId).to.be("0");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSentenceBasicPlansForOffenderUsingGET', function() {
        it('should call getSentenceBasicPlansForOffenderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSentenceBasicPlansForOffenderUsingGET call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var opts = {};
          opts.assessmentStatus = "assessmentStatus_example";
          opts.assessmentType = "assessmentType_example";
          opts.historicStatus = "historicStatus_example";
          opts.voided = true;

          instance.getSentenceBasicPlansForOffenderUsingGET(identity, identityType, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HmppsOffenderAssessmentApi.BasicSentencePlanDto);
              {
                let dataCtr = data.basicSentencePlanItems;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(HmppsOffenderAssessmentApi.BasicSentencePlanItemDto);
                  expect(data.basicSentPlanObjId).to.be.a('number');
                  expect(data.basicSentPlanObjId).to.be("0");
                  expect(data.dateCompleted).to.be.a(Date);
                  expect(data.dateCompleted).to.be(new Date());
                  expect(data.dateOpened).to.be.a(Date);
                  expect(data.dateOpened).to.be(new Date());
                  expect(data.includeInPlan).to.be.a('boolean');
                  expect(data.includeInPlan).to.be(false);
                  expect(data.measureText).to.be.a('string');
                  expect(data.measureText).to.be("");
                  expect(data.objectiveText).to.be.a('string');
                  expect(data.objectiveText).to.be("");
                  expect(data.offenceBehaviourLink).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                        expect(data.offenceBehaviourLink.code).to.be.a('string');
                    expect(data.offenceBehaviourLink.code).to.be("LAYER_3");
                    expect(data.offenceBehaviourLink.description).to.be.a('string');
                    expect(data.offenceBehaviourLink.description).to.be("Full (Layer 3)");
                    expect(data.offenceBehaviourLink.shortDescription).to.be.a('string');
                    expect(data.offenceBehaviourLink.shortDescription).to.be("Layer 3");
                  expect(data.problemAreaCompInd).to.be.a('boolean');
                  expect(data.problemAreaCompInd).to.be(false);
                  expect(data.timescalesText).to.be.a('string');
                  expect(data.timescalesText).to.be("");
                  expect(data.whatWorkText).to.be.a('string');
                  expect(data.whatWorkText).to.be("");
                  expect(data.whoWillDoWorkText).to.be.a('string');
                  expect(data.whoWillDoWorkText).to.be("");
  
                        }
              }
              expect(data.createdDate).to.be.a(Date);
              expect(data.createdDate).to.be(new Date());
              expect(data.sentencePlanId).to.be.a('number');
              expect(data.sentencePlanId).to.be("0");
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSummarySentencePlansForOffenderUsingGET', function() {
        it('should call getSummarySentencePlansForOffenderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getSummarySentencePlansForOffenderUsingGET call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var opts = {};
          opts.assessmentStatus = "assessmentStatus_example";
          opts.assessmentType = "assessmentType_example";
          opts.historicStatus = "historicStatus_example";
          opts.voided = true;

          instance.getSummarySentencePlansForOffenderUsingGET(identity, identityType, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HmppsOffenderAssessmentApi.FullSentencePlanSummaryDto);
              expect(data.completedDate).to.be.a(Date);
              expect(data.completedDate).to.be(new Date());
              expect(data.createdDate).to.be.a(Date);
              expect(data.createdDate).to.be(new Date());
              expect(data.oasysSetId).to.be.a('number');
              expect(data.oasysSetId).to.be("0");
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
