/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HmppsOffenderAssessmentApi.ReferenceAssessmentApi();
  });

  describe('(package)', function() {
    describe('ReferenceAssessmentApi', function() {
      describe('getReferenceAssessmentOfUsingGET', function() {
        it('should call getReferenceAssessmentOfUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getReferenceAssessmentOfUsingGET call and complete the assertions
          /*
          var versionCode = "versionCode_example";
          var versionNumber = "versionNumber_example";

          instance.getReferenceAssessmentOfUsingGET(versionCode, versionNumber).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.RefAssessmentDto);
            expect(data.oasysScoringAlgorithmVersion).to.be.a('number');
            expect(data.oasysScoringAlgorithmVersion).to.be("0");
            expect(data.refAssVersionCode).to.be.a('string');
            expect(data.refAssVersionCode).to.be("");
            expect(data.refAssessmentVersionId).to.be.a('number');
            expect(data.refAssessmentVersionId).to.be("0");
            expect(data.refModuleCode).to.be.a('string');
            expect(data.refModuleCode).to.be("");
            {
              let dataCtr = data.refSections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.RefSectionDto);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.refCrimNeedScoreThreshold).to.be.a('number');
                expect(data.refCrimNeedScoreThreshold).to.be("0");
                {
                  let dataCtr = data.refQuestions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HmppsOffenderAssessmentApi.RefQuestionDto);
                    {
                      let dataCtr = data.refAnswers;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(HmppsOffenderAssessmentApi.RefAnswerDto);
                        expect(data.refAnswerCode).to.be.a('string');
                        expect(data.refAnswerCode).to.be("");
                        expect(data.refAnswerId).to.be.a('number');
                        expect(data.refAnswerId).to.be("0");
                        expect(data.refDisplaySort).to.be.a('number');
                        expect(data.refDisplaySort).to.be("0");
        
                              }
                    }
                    expect(data.refCtAreaEstCode).to.be.a('string');
                    expect(data.refCtAreaEstCode).to.be("");
                    expect(data.refDisplaySort).to.be.a('number');
                    expect(data.refDisplaySort).to.be("0");
                    expect(data.refMandatoryIndicator).to.be.a('boolean');
                    expect(data.refMandatoryIndicator).to.be(false);
                    expect(data.refQAWeighting).to.be.a('number');
                    expect(data.refQAWeighting).to.be("0");
                    expect(data.refQuestionCode).to.be.a('string');
                    expect(data.refQuestionCode).to.be("");
                    expect(data.refQuestionId).to.be.a('number');
                    expect(data.refQuestionId).to.be("0");
                    expect(data.refQuestionText).to.be.a('string');
                    expect(data.refQuestionText).to.be("");
    
                          }
                }
                expect(data.refScoredForOgp).to.be.a('boolean');
                expect(data.refScoredForOgp).to.be(false);
                expect(data.refScoredForOvp).to.be.a('boolean');
                expect(data.refScoredForOvp).to.be(false);
                expect(data.refSectionCode).to.be.a('string');
                expect(data.refSectionCode).to.be("");
                expect(data.refSectionId).to.be.a('number');
                expect(data.refSectionId).to.be("0");
                expect(data.shortDescription).to.be.a('string');
                expect(data.shortDescription).to.be("");

                      }
            }
            expect(data.versionNumber).to.be.a('string');
            expect(data.versionNumber).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
