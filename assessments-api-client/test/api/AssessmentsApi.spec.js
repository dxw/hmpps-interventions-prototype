/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HmppsOffenderAssessmentApi.AssessmentsApi();
  });

  describe('(package)', function() {
    describe('AssessmentsApi', function() {
      describe('getAssessmentUsingGET', function() {
        it('should call getAssessmentUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getAssessmentUsingGET call and complete the assertions
          /*
          var oasysSetId = 789;

          instance.getAssessmentUsingGET(oasysSetId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.AssessmentDto);
            expect(data.assessmentId).to.be.a('number');
            expect(data.assessmentId).to.be(1234);
            expect(data.assessmentStatus).to.be.a('string');
            expect(data.assessmentStatus).to.be("OPEN");
            expect(data.assessmentType).to.be.a('string');
            expect(data.assessmentType).to.be("LAYER_Â£");
            expect(data.assessorName).to.be.a('string');
            expect(data.assessorName).to.be("Layer 3");
            expect(data.childSafeguardingIndicated).to.be.a('boolean');
            expect(data.childSafeguardingIndicated).to.be(true);
            expect(data.completedDateTime).to.be.a(Date);
            expect(data.completedDateTime).to.be(2020-01-02T16:00:00);
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(2020-01-02T16:00:00);
            expect(data.historicStatus).to.be.a('string');
            expect(data.historicStatus).to.be("CURRENT");
            {
              let dataCtr = data.layer3SentencePlanNeeds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.AssessmentNeedDto);
                expect(data.flaggedAsNeed).to.be.a('boolean');
                expect(data.flaggedAsNeed).to.be(true);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Accommodation");
                expect(data.overThreshold).to.be.a('boolean');
                expect(data.overThreshold).to.be(false);
                expect(data.riskOfHarm).to.be.a('boolean');
                expect(data.riskOfHarm).to.be(true);
                expect(data.riskOfReoffending).to.be.a('boolean');
                expect(data.riskOfReoffending).to.be(true);
                expect(data.section).to.be.a('string');
                expect(data.section).to.be("ACCOMMODATION");

                      }
            }
            expect(data.refAssessmentId).to.be.a('number');
            expect(data.refAssessmentId).to.be(1);
            expect(data.refAssessmentOasysScoringAlgorithmVersion).to.be.a('number');
            expect(data.refAssessmentOasysScoringAlgorithmVersion).to.be(1);
            expect(data.refAssessmentVersionCode).to.be.a('string');
            expect(data.refAssessmentVersionCode).to.be("LAYER3");
            expect(data.refAssessmentVersionNumber).to.be.a('string');
            expect(data.refAssessmentVersionNumber).to.be("1");
            {
              let dataCtr = data.sections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.SectionDto);
                expect(data.assessmentId).to.be.a('number');
                expect(data.assessmentId).to.be("0");
                expect(data.lowScoreAttentionNeeded).to.be.a('boolean');
                expect(data.lowScoreAttentionNeeded).to.be(false);
                {
                  let dataCtr = data.questions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HmppsOffenderAssessmentApi.QuestionDto);
                    expect(data.answer).to.be.a(HmppsOffenderAssessmentApi.AnswerDto);
                          expect(data.answer.displayOrder).to.be.a('number');
                      expect(data.answer.displayOrder).to.be(1);
                      expect(data.answer.freeFormText).to.be.a('string');
                      expect(data.answer.freeFormText).to.be("Some answer");
                      expect(data.answer.oasysAnswerId).to.be.a('number');
                      expect(data.answer.oasysAnswerId).to.be(123456);
                      expect(data.answer.ogpScore).to.be.a('number');
                      expect(data.answer.ogpScore).to.be(1);
                      expect(data.answer.ovpScore).to.be.a('number');
                      expect(data.answer.ovpScore).to.be(1);
                      expect(data.answer.qaRawScore).to.be.a('number');
                      expect(data.answer.qaRawScore).to.be(2);
                      expect(data.answer.refAnswerCode).to.be.a('string');
                      expect(data.answer.refAnswerCode).to.be("NO");
                      expect(data.answer.refAnswerId).to.be.a('number');
                      expect(data.answer.refAnswerId).to.be(123456);
                      expect(data.answer.staticText).to.be.a('string');
                      expect(data.answer.staticText).to.be("123456");
                    expect(data.displayOrder).to.be.a('number');
                    expect(data.displayOrder).to.be(123456);
                    expect(data.displayScore).to.be.a('number');
                    expect(data.displayScore).to.be(123456);
                    expect(data.oasysQuestionId).to.be.a('number');
                    expect(data.oasysQuestionId).to.be(123456);
                    expect(data.questionText).to.be.a('string');
                    expect(data.questionText).to.be("123456");
                    expect(data.refQuestionCode).to.be.a('string');
                    expect(data.refQuestionCode).to.be("10.98");
                    expect(data.refQuestionId).to.be.a('number');
                    expect(data.refQuestionId).to.be(123456);
    
                          }
                }
                expect(data.refAssessmentVersionCode).to.be.a('string');
                expect(data.refAssessmentVersionCode).to.be("");
                expect(data.refSectionCode).to.be.a('string');
                expect(data.refSectionCode).to.be("");
                expect(data.refSectionCrimNeedScoreThreshold).to.be.a('number');
                expect(data.refSectionCrimNeedScoreThreshold).to.be("0");
                expect(data.refSectionVersionNumber).to.be.a('string');
                expect(data.refSectionVersionNumber).to.be("");
                expect(data.sectionId).to.be.a('number');
                expect(data.sectionId).to.be("0");
                expect(data.sectionOgpRawScore).to.be.a('number');
                expect(data.sectionOgpRawScore).to.be("0");
                expect(data.sectionOgpWeightedScore).to.be.a('number');
                expect(data.sectionOgpWeightedScore).to.be("0");
                expect(data.sectionOtherRawScore).to.be.a('number');
                expect(data.sectionOtherRawScore).to.be("0");
                expect(data.sectionOtherWeightedScore).to.be.a('number');
                expect(data.sectionOtherWeightedScore).to.be("0");
                expect(data.sectionOvpRawScore).to.be.a('number');
                expect(data.sectionOvpRawScore).to.be("0");
                expect(data.sectionOvpWeightedScore).to.be.a('number');
                expect(data.sectionOvpWeightedScore).to.be("0");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");

                      }
            }
            {
              let dataCtr = data.sentence;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.SentenceDto);
                expect(data.activity).to.be.a('string');
                expect(data.activity).to.be("");
                expect(data.cja).to.be.a('boolean');
                expect(data.cja).to.be(false);
                expect(data.cjaSupervisionMonths).to.be.a('number');
                expect(data.cjaSupervisionMonths).to.be("0");
                expect(data.cjaUnpaidHours).to.be.a('number');
                expect(data.cjaUnpaidHours).to.be("0");
                expect(data.custodial).to.be.a('boolean');
                expect(data.custodial).to.be(false);
                expect(data.offenceBlockType).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                      expect(data.offenceBlockType.code).to.be.a('string');
                  expect(data.offenceBlockType.code).to.be("LAYER_3");
                  expect(data.offenceBlockType.description).to.be.a('string');
                  expect(data.offenceBlockType.description).to.be("Full (Layer 3)");
                  expect(data.offenceBlockType.shortDescription).to.be.a('string');
                  expect(data.offenceBlockType.shortDescription).to.be("Layer 3");
                expect(data.offenceDate).to.be.a(Date);
                expect(data.offenceDate).to.be(new Date());
                expect(data.orderType).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                      expect(data.orderType.code).to.be.a('string');
                  expect(data.orderType.code).to.be("LAYER_3");
                  expect(data.orderType.description).to.be.a('string');
                  expect(data.orderType.description).to.be("Full (Layer 3)");
                  expect(data.orderType.shortDescription).to.be.a('string');
                  expect(data.orderType.shortDescription).to.be("Layer 3");
                expect(data.sentenceCode).to.be.a('string');
                expect(data.sentenceCode).to.be("");
                expect(data.sentenceDate).to.be.a(Date);
                expect(data.sentenceDate).to.be(new Date());
                expect(data.sentenceDescription).to.be.a('string');
                expect(data.sentenceDescription).to.be("");
                expect(data.sentenceLengthCustodyDays).to.be.a('number');
                expect(data.sentenceLengthCustodyDays).to.be("0");

                      }
            }
            expect(data.voidedDateTime).to.be.a(Date);
            expect(data.voidedDateTime).to.be(2020-01-02T16:00:00);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAssessmentUsingGET1', function() {
        it('should call getAssessmentUsingGET1 successfully', function(done) {
          // TODO: uncomment, update parameter values for getAssessmentUsingGET1 call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var opts = {};
          opts.assessmentStatus = "assessmentStatus_example";
          opts.assessmentType = "assessmentType_example";
          opts.historicStatus = "historicStatus_example";
          opts.voided = true;

          instance.getAssessmentUsingGET1(identity, identityType, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(HmppsOffenderAssessmentApi.AssessmentDto);
            expect(data.assessmentId).to.be.a('number');
            expect(data.assessmentId).to.be(1234);
            expect(data.assessmentStatus).to.be.a('string');
            expect(data.assessmentStatus).to.be("OPEN");
            expect(data.assessmentType).to.be.a('string');
            expect(data.assessmentType).to.be("LAYER_Â£");
            expect(data.assessorName).to.be.a('string');
            expect(data.assessorName).to.be("Layer 3");
            expect(data.childSafeguardingIndicated).to.be.a('boolean');
            expect(data.childSafeguardingIndicated).to.be(true);
            expect(data.completedDateTime).to.be.a(Date);
            expect(data.completedDateTime).to.be(2020-01-02T16:00:00);
            expect(data.createdDateTime).to.be.a(Date);
            expect(data.createdDateTime).to.be(2020-01-02T16:00:00);
            expect(data.historicStatus).to.be.a('string');
            expect(data.historicStatus).to.be("CURRENT");
            {
              let dataCtr = data.layer3SentencePlanNeeds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.AssessmentNeedDto);
                expect(data.flaggedAsNeed).to.be.a('boolean');
                expect(data.flaggedAsNeed).to.be(true);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Accommodation");
                expect(data.overThreshold).to.be.a('boolean');
                expect(data.overThreshold).to.be(false);
                expect(data.riskOfHarm).to.be.a('boolean');
                expect(data.riskOfHarm).to.be(true);
                expect(data.riskOfReoffending).to.be.a('boolean');
                expect(data.riskOfReoffending).to.be(true);
                expect(data.section).to.be.a('string');
                expect(data.section).to.be("ACCOMMODATION");

                      }
            }
            expect(data.refAssessmentId).to.be.a('number');
            expect(data.refAssessmentId).to.be(1);
            expect(data.refAssessmentOasysScoringAlgorithmVersion).to.be.a('number');
            expect(data.refAssessmentOasysScoringAlgorithmVersion).to.be(1);
            expect(data.refAssessmentVersionCode).to.be.a('string');
            expect(data.refAssessmentVersionCode).to.be("LAYER3");
            expect(data.refAssessmentVersionNumber).to.be.a('string');
            expect(data.refAssessmentVersionNumber).to.be("1");
            {
              let dataCtr = data.sections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.SectionDto);
                expect(data.assessmentId).to.be.a('number');
                expect(data.assessmentId).to.be("0");
                expect(data.lowScoreAttentionNeeded).to.be.a('boolean');
                expect(data.lowScoreAttentionNeeded).to.be(false);
                {
                  let dataCtr = data.questions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HmppsOffenderAssessmentApi.QuestionDto);
                    expect(data.answer).to.be.a(HmppsOffenderAssessmentApi.AnswerDto);
                          expect(data.answer.displayOrder).to.be.a('number');
                      expect(data.answer.displayOrder).to.be(1);
                      expect(data.answer.freeFormText).to.be.a('string');
                      expect(data.answer.freeFormText).to.be("Some answer");
                      expect(data.answer.oasysAnswerId).to.be.a('number');
                      expect(data.answer.oasysAnswerId).to.be(123456);
                      expect(data.answer.ogpScore).to.be.a('number');
                      expect(data.answer.ogpScore).to.be(1);
                      expect(data.answer.ovpScore).to.be.a('number');
                      expect(data.answer.ovpScore).to.be(1);
                      expect(data.answer.qaRawScore).to.be.a('number');
                      expect(data.answer.qaRawScore).to.be(2);
                      expect(data.answer.refAnswerCode).to.be.a('string');
                      expect(data.answer.refAnswerCode).to.be("NO");
                      expect(data.answer.refAnswerId).to.be.a('number');
                      expect(data.answer.refAnswerId).to.be(123456);
                      expect(data.answer.staticText).to.be.a('string');
                      expect(data.answer.staticText).to.be("123456");
                    expect(data.displayOrder).to.be.a('number');
                    expect(data.displayOrder).to.be(123456);
                    expect(data.displayScore).to.be.a('number');
                    expect(data.displayScore).to.be(123456);
                    expect(data.oasysQuestionId).to.be.a('number');
                    expect(data.oasysQuestionId).to.be(123456);
                    expect(data.questionText).to.be.a('string');
                    expect(data.questionText).to.be("123456");
                    expect(data.refQuestionCode).to.be.a('string');
                    expect(data.refQuestionCode).to.be("10.98");
                    expect(data.refQuestionId).to.be.a('number');
                    expect(data.refQuestionId).to.be(123456);
    
                          }
                }
                expect(data.refAssessmentVersionCode).to.be.a('string');
                expect(data.refAssessmentVersionCode).to.be("");
                expect(data.refSectionCode).to.be.a('string');
                expect(data.refSectionCode).to.be("");
                expect(data.refSectionCrimNeedScoreThreshold).to.be.a('number');
                expect(data.refSectionCrimNeedScoreThreshold).to.be("0");
                expect(data.refSectionVersionNumber).to.be.a('string');
                expect(data.refSectionVersionNumber).to.be("");
                expect(data.sectionId).to.be.a('number');
                expect(data.sectionId).to.be("0");
                expect(data.sectionOgpRawScore).to.be.a('number');
                expect(data.sectionOgpRawScore).to.be("0");
                expect(data.sectionOgpWeightedScore).to.be.a('number');
                expect(data.sectionOgpWeightedScore).to.be("0");
                expect(data.sectionOtherRawScore).to.be.a('number');
                expect(data.sectionOtherRawScore).to.be("0");
                expect(data.sectionOtherWeightedScore).to.be.a('number');
                expect(data.sectionOtherWeightedScore).to.be("0");
                expect(data.sectionOvpRawScore).to.be.a('number');
                expect(data.sectionOvpRawScore).to.be("0");
                expect(data.sectionOvpWeightedScore).to.be.a('number');
                expect(data.sectionOvpWeightedScore).to.be("0");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");

                      }
            }
            {
              let dataCtr = data.sentence;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HmppsOffenderAssessmentApi.SentenceDto);
                expect(data.activity).to.be.a('string');
                expect(data.activity).to.be("");
                expect(data.cja).to.be.a('boolean');
                expect(data.cja).to.be(false);
                expect(data.cjaSupervisionMonths).to.be.a('number');
                expect(data.cjaSupervisionMonths).to.be("0");
                expect(data.cjaUnpaidHours).to.be.a('number');
                expect(data.cjaUnpaidHours).to.be("0");
                expect(data.custodial).to.be.a('boolean');
                expect(data.custodial).to.be(false);
                expect(data.offenceBlockType).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                      expect(data.offenceBlockType.code).to.be.a('string');
                  expect(data.offenceBlockType.code).to.be("LAYER_3");
                  expect(data.offenceBlockType.description).to.be.a('string');
                  expect(data.offenceBlockType.description).to.be("Full (Layer 3)");
                  expect(data.offenceBlockType.shortDescription).to.be.a('string');
                  expect(data.offenceBlockType.shortDescription).to.be("Layer 3");
                expect(data.offenceDate).to.be.a(Date);
                expect(data.offenceDate).to.be(new Date());
                expect(data.orderType).to.be.a(HmppsOffenderAssessmentApi.RefElementDto);
                      expect(data.orderType.code).to.be.a('string');
                  expect(data.orderType.code).to.be("LAYER_3");
                  expect(data.orderType.description).to.be.a('string');
                  expect(data.orderType.description).to.be("Full (Layer 3)");
                  expect(data.orderType.shortDescription).to.be.a('string');
                  expect(data.orderType.shortDescription).to.be("Layer 3");
                expect(data.sentenceCode).to.be.a('string');
                expect(data.sentenceCode).to.be("");
                expect(data.sentenceDate).to.be.a(Date);
                expect(data.sentenceDate).to.be(new Date());
                expect(data.sentenceDescription).to.be.a('string');
                expect(data.sentenceDescription).to.be("");
                expect(data.sentenceLengthCustodyDays).to.be.a('number');
                expect(data.sentenceLengthCustodyDays).to.be("0");

                      }
            }
            expect(data.voidedDateTime).to.be.a(Date);
            expect(data.voidedDateTime).to.be(2020-01-02T16:00:00);

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAssessmentsForOffenderUsingGET', function() {
        it('should call getAssessmentsForOffenderUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getAssessmentsForOffenderUsingGET call and complete the assertions
          /*
          var identity = "identity_example";
          var identityType = "identityType_example";
          var opts = {};
          opts.assessmentStatus = "assessmentStatus_example";
          opts.assessmentType = "assessmentType_example";
          opts.historicStatus = "historicStatus_example";
          opts.voided = true;

          instance.getAssessmentsForOffenderUsingGET(identity, identityType, opts).then(function(data) {
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HmppsOffenderAssessmentApi.AssessmentSummaryDto);
              expect(data.assessmentId).to.be.a('number');
              expect(data.assessmentId).to.be(1234);
              expect(data.assessmentStatus).to.be.a('string');
              expect(data.assessmentStatus).to.be("OPEN");
              expect(data.assessmentType).to.be.a('string');
              expect(data.assessmentType).to.be("LAYER_Â£");
              expect(data.assessorName).to.be.a('string');
              expect(data.assessorName).to.be("Layer 3");
              expect(data.completedDateTime).to.be.a(Date);
              expect(data.completedDateTime).to.be(2020-01-02T16:00:00);
              expect(data.createdDateTime).to.be.a(Date);
              expect(data.createdDateTime).to.be(2020-01-02T16:00:00);
              expect(data.historicStatus).to.be.a('string');
              expect(data.historicStatus).to.be("CURRENT");
              expect(data.refAssessmentId).to.be.a('number');
              expect(data.refAssessmentId).to.be(1);
              expect(data.refAssessmentOasysScoringAlgorithmVersion).to.be.a('number');
              expect(data.refAssessmentOasysScoringAlgorithmVersion).to.be(1);
              expect(data.refAssessmentVersionCode).to.be.a('string');
              expect(data.refAssessmentVersionCode).to.be("LAYER3");
              expect(data.refAssessmentVersionNumber).to.be.a('string');
              expect(data.refAssessmentVersionNumber).to.be("1");
              expect(data.voidedDateTime).to.be.a(Date);
              expect(data.voidedDateTime).to.be(2020-01-02T16:00:00);
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
