/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RefQuestionDto', function() {
      beforeEach(function() {
        instance = new HmppsOffenderAssessmentApi.RefQuestionDto();
      });

      it('should create an instance of RefQuestionDto', function() {
        // TODO: update the code to test RefQuestionDto
        expect(instance).to.be.a(HmppsOffenderAssessmentApi.RefQuestionDto);
      });

      it('should have the property refAnswers (base name: "refAnswers")', function() {
        // TODO: update the code to test the property refAnswers
        expect(instance).to.have.property('refAnswers');
        // expect(instance.refAnswers).to.be(expectedValueLiteral);
      });

      it('should have the property refCtAreaEstCode (base name: "refCtAreaEstCode")', function() {
        // TODO: update the code to test the property refCtAreaEstCode
        expect(instance).to.have.property('refCtAreaEstCode');
        // expect(instance.refCtAreaEstCode).to.be(expectedValueLiteral);
      });

      it('should have the property refDisplaySort (base name: "refDisplaySort")', function() {
        // TODO: update the code to test the property refDisplaySort
        expect(instance).to.have.property('refDisplaySort');
        // expect(instance.refDisplaySort).to.be(expectedValueLiteral);
      });

      it('should have the property refMandatoryIndicator (base name: "refMandatoryIndicator")', function() {
        // TODO: update the code to test the property refMandatoryIndicator
        expect(instance).to.have.property('refMandatoryIndicator');
        // expect(instance.refMandatoryIndicator).to.be(expectedValueLiteral);
      });

      it('should have the property refQAWeighting (base name: "refQAWeighting")', function() {
        // TODO: update the code to test the property refQAWeighting
        expect(instance).to.have.property('refQAWeighting');
        // expect(instance.refQAWeighting).to.be(expectedValueLiteral);
      });

      it('should have the property refQuestionCode (base name: "refQuestionCode")', function() {
        // TODO: update the code to test the property refQuestionCode
        expect(instance).to.have.property('refQuestionCode');
        // expect(instance.refQuestionCode).to.be(expectedValueLiteral);
      });

      it('should have the property refQuestionId (base name: "refQuestionId")', function() {
        // TODO: update the code to test the property refQuestionId
        expect(instance).to.have.property('refQuestionId');
        // expect(instance.refQuestionId).to.be(expectedValueLiteral);
      });

      it('should have the property refQuestionText (base name: "refQuestionText")', function() {
        // TODO: update the code to test the property refQuestionText
        expect(instance).to.have.property('refQuestionText');
        // expect(instance.refQuestionText).to.be(expectedValueLiteral);
      });

    });
  });

}));
