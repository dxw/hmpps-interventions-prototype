/*
 * HMPPS Offender Assessment API
 * OASys Data API.
 *
 * OpenAPI spec version: 2020-09-02
 * Contact: feedback@digital.justice.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HmppsOffenderAssessmentApi);
  }
}(this, function(expect, HmppsOffenderAssessmentApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BasicSentencePlanItemDto', function() {
      beforeEach(function() {
        instance = new HmppsOffenderAssessmentApi.BasicSentencePlanItemDto();
      });

      it('should create an instance of BasicSentencePlanItemDto', function() {
        // TODO: update the code to test BasicSentencePlanItemDto
        expect(instance).to.be.a(HmppsOffenderAssessmentApi.BasicSentencePlanItemDto);
      });

      it('should have the property basicSentPlanObjId (base name: "basicSentPlanObjId")', function() {
        // TODO: update the code to test the property basicSentPlanObjId
        expect(instance).to.have.property('basicSentPlanObjId');
        // expect(instance.basicSentPlanObjId).to.be(expectedValueLiteral);
      });

      it('should have the property dateCompleted (base name: "dateCompleted")', function() {
        // TODO: update the code to test the property dateCompleted
        expect(instance).to.have.property('dateCompleted');
        // expect(instance.dateCompleted).to.be(expectedValueLiteral);
      });

      it('should have the property dateOpened (base name: "dateOpened")', function() {
        // TODO: update the code to test the property dateOpened
        expect(instance).to.have.property('dateOpened');
        // expect(instance.dateOpened).to.be(expectedValueLiteral);
      });

      it('should have the property includeInPlan (base name: "includeInPlan")', function() {
        // TODO: update the code to test the property includeInPlan
        expect(instance).to.have.property('includeInPlan');
        // expect(instance.includeInPlan).to.be(expectedValueLiteral);
      });

      it('should have the property measureText (base name: "measureText")', function() {
        // TODO: update the code to test the property measureText
        expect(instance).to.have.property('measureText');
        // expect(instance.measureText).to.be(expectedValueLiteral);
      });

      it('should have the property objectiveText (base name: "objectiveText")', function() {
        // TODO: update the code to test the property objectiveText
        expect(instance).to.have.property('objectiveText');
        // expect(instance.objectiveText).to.be(expectedValueLiteral);
      });

      it('should have the property offenceBehaviourLink (base name: "offenceBehaviourLink")', function() {
        // TODO: update the code to test the property offenceBehaviourLink
        expect(instance).to.have.property('offenceBehaviourLink');
        // expect(instance.offenceBehaviourLink).to.be(expectedValueLiteral);
      });

      it('should have the property problemAreaCompInd (base name: "problemAreaCompInd")', function() {
        // TODO: update the code to test the property problemAreaCompInd
        expect(instance).to.have.property('problemAreaCompInd');
        // expect(instance.problemAreaCompInd).to.be(expectedValueLiteral);
      });

      it('should have the property timescalesText (base name: "timescalesText")', function() {
        // TODO: update the code to test the property timescalesText
        expect(instance).to.have.property('timescalesText');
        // expect(instance.timescalesText).to.be(expectedValueLiteral);
      });

      it('should have the property whatWorkText (base name: "whatWorkText")', function() {
        // TODO: update the code to test the property whatWorkText
        expect(instance).to.have.property('whatWorkText');
        // expect(instance.whatWorkText).to.be(expectedValueLiteral);
      });

      it('should have the property whoWillDoWorkText (base name: "whoWillDoWorkText")', function() {
        // TODO: update the code to test the property whoWillDoWorkText
        expect(instance).to.have.property('whoWillDoWorkText');
        // expect(instance.whoWillDoWorkText).to.be(expectedValueLiteral);
      });

    });
  });

}));
